{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport withRedux from 'next-redux-wrapper';\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport styledNormalize from 'styled-normalize';\nimport { withRouter } from 'next/router';\nimport { Provider } from 'react-redux';\nimport App from 'next/app';\nimport Layout from '../src/components/Layout';\nimport theme from '../src/theme';\nimport '../public/static/css/style.css';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { persistor, store, createStoreX } from '../src/store/createStore';\nconst GlobalStyle = createGlobalStyle`\n  ${styledNormalize}\n`;\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    return {\n      pageProps: Component.getInitialProps ? await Component.getInitialProps(ctx) : {}\n    };\n  }\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      router\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(ThemeProvider, {\n      theme: theme\n    }, __jsx(Provider, {\n      store: store\n    }, __jsx(PersistGate, {\n      loading: __jsx(Component, pageProps),\n      persistor: persistor\n    }, __jsx(GlobalStyle, null), __jsx(Layout, null, __jsx(Component, _extends({\n      router: router\n    }, pageProps)))))));\n  }\n\n}\n\nexport default withRedux(createStoreX)(withRouter(MyApp));","map":null,"metadata":{},"sourceType":"module"}