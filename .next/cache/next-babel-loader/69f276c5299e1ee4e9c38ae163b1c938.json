{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Immutable from 'immutable';\nimport * as ActionType from 'redux/actions/actionTypes';\nconst initialState = {\n  users: ''\n};\nexport default function (state = initialState, action) {\n  state = Immutable.fromJS(state);\n\n  switch (action.type) {\n    case ActionType.CREATE_USER:\n      let new_user = {\n        name: action.payload.name,\n        mobile: action.payload.mobile,\n        address: action.payload.address\n      };\n      console.log('dfgdfvsd'); // state.users_data = 'new_user';\n      // return Object.assign({}, state);\n      //// user below code If you know the usage of 'Immutable'\n\n      return _objectSpread({}, s);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/shamim/Practice/NextJS/nextjs-redux-boilerplate/src/redux/reducers/userReducer.js"],"names":["Immutable","ActionType","initialState","users","state","action","fromJS","type","CREATE_USER","new_user","name","payload","mobile","address","console","log","s"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAO,KAAKC,UAAZ,MAA4B,2BAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAIA,eAAe,UAAUC,KAAK,GAAGF,YAAlB,EAAgCG,MAAhC,EAAwC;AACrDD,EAAAA,KAAK,GAAGJ,SAAS,CAACM,MAAV,CAAiBF,KAAjB,CAAR;;AACA,UAAQC,MAAM,CAACE,IAAf;AACE,SAAKN,UAAU,CAACO,WAAhB;AACE,UAAIC,QAAQ,GAAG;AACbC,QAAAA,IAAI,EAAEL,MAAM,CAACM,OAAP,CAAeD,IADR;AAEbE,QAAAA,MAAM,EAAEP,MAAM,CAACM,OAAP,CAAeC,MAFV;AAGbC,QAAAA,OAAO,EAAER,MAAM,CAACM,OAAP,CAAeE;AAHX,OAAf;AAKAC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EANF,CAQE;AACA;AAEA;;AACA,+BAAWC,CAAX;;AAEF;AACE,aAAOZ,KAAP;AAhBJ;AAkBD","sourcesContent":["import Immutable from 'immutable';\nimport * as ActionType from 'redux/actions/actionTypes';\n\nconst initialState = {\n  users: '',\n};\n\nexport default function (state = initialState, action) {\n  state = Immutable.fromJS(state);\n  switch (action.type) {\n    case ActionType.CREATE_USER:\n      let new_user = {\n        name: action.payload.name,\n        mobile: action.payload.mobile,\n        address: action.payload.address,\n      };\n      console.log('dfgdfvsd');\n\n      // state.users_data = 'new_user';\n      // return Object.assign({}, state);\n\n      //// user below code If you know the usage of 'Immutable'\n      return {...s}\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}