{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport Immutable from 'immutable';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport config from '../config';\nimport rootReducer from '../reducers';\nexport var persistConfig = {\n  key: 'primary',\n  storage: storage,\n  whitelist: ['user']\n};\nvar persistedReducer = persistReducer(persistConfig, rootReducer);\n\nfunction createMiddlewares() {\n  var middlewares = [thunkMiddleware];\n\n  if (config.env === 'development' && true) {\n    middlewares.push(createLogger({\n      level: 'info',\n      collapsed: true,\n      stateTransformer: function stateTransformer(state) {\n        var newState = {};\n\n        for (var _i = 0, _Object$keys = Object.keys(state); _i < _Object$keys.length; _i++) {\n          var i = _Object$keys[_i];\n\n          if (Immutable.Iterable.isIterable(state[i])) {\n            newState[i] = state[i].toJS();\n          } else {\n            newState[i] = state[i];\n          }\n        }\n\n        return newState;\n      }\n    }));\n  }\n\n  return middlewares;\n}\n\nfunction immutableChildren(obj) {\n  var state = {};\n  Object.keys(obj).forEach(function (key) {\n    state[key] = Immutable.fromJS(obj[key]);\n  });\n  return state;\n}\n\nvar middlewares = createMiddlewares();\nvar initialState = {};\nvar state = immutableChildren(initialState);\nexport function createStoreX(initialState, context) {\n  var isServer = context.isServer;\n  return createStore(persistedReducer, state, applyMiddleware.apply(void 0, _toConsumableArray(middlewares)));\n}\nexport var store = createStore(persistedReducer, state, composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middlewares))));\nexport var persistor = persistStore(store);","map":null,"metadata":{},"sourceType":"module"}