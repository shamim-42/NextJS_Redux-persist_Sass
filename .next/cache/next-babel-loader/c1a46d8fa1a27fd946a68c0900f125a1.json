{"ast":null,"code":"import Immutable from 'immutable';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport config from 'config';\nimport rootReducer from '../reducers';\nexport const persistConfig = {\n  key: 'primary',\n  storage,\n  whitelist: ['user']\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nfunction createMiddlewares() {\n  const middlewares = [thunkMiddleware];\n\n  if (config.env === 'development' && false) {\n    middlewares.push(createLogger({\n      level: 'info',\n      collapsed: true,\n      stateTransformer: state => {\n        const newState = {};\n\n        for (const i of Object.keys(state)) {\n          if (Immutable.Iterable.isIterable(state[i])) {\n            newState[i] = state[i].toJS();\n          } else {\n            newState[i] = state[i];\n          }\n        }\n\n        return newState;\n      }\n    }));\n  }\n\n  return middlewares;\n}\n\nfunction immutableChildren(obj) {\n  const state = {};\n  Object.keys(obj).forEach(key => {\n    state[key] = Immutable.fromJS(obj[key]);\n  });\n  return state;\n}\n\nconst middlewares = createMiddlewares();\nconst initialState = {};\nconst state = immutableChildren(initialState);\nexport function createStoreX(initialState, context) {\n  const {\n    isServer\n  } = context;\n  return createStore(persistedReducer, state, applyMiddleware(...middlewares));\n}\nexport const store = createStore(persistedReducer, state, composeWithDevTools(applyMiddleware(...middlewares)));\nexport const persistor = persistStore(store);","map":{"version":3,"sources":["/Users/shoyebmemon/Documents/gitHub/nextjs-redux-boilerplate/src/store/createStore.js"],"names":["Immutable","thunkMiddleware","createLogger","composeWithDevTools","createStore","applyMiddleware","persistStore","persistReducer","storage","config","rootReducer","persistConfig","key","whitelist","persistedReducer","createMiddlewares","middlewares","env","push","level","collapsed","stateTransformer","state","newState","i","Object","keys","Iterable","isIterable","toJS","immutableChildren","obj","forEach","fromJS","initialState","createStoreX","context","isServer","store","persistor"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AAEA,SAASC,YAAT,EAAsBC,cAAtB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,OAAO,MAAMC,aAAa,GAAG;AAC3BC,EAAAA,GAAG,EAAE,SADsB;AAE3BJ,EAAAA,OAF2B;AAG3BK,EAAAA,SAAS,EAAE,CAAC,MAAD;AAHgB,CAAtB;AAMP,MAAMC,gBAAgB,GAAGP,cAAc,CAACI,aAAD,EAAgBD,WAAhB,CAAvC;;AAEA,SAASK,iBAAT,GAA8B;AAC5B,QAAMC,WAAW,GAAG,CAClBf,eADkB,CAApB;;AAIA,MAAIQ,MAAM,CAACQ,GAAP,KAAe,aAAf,SAAJ,EAAmE;AACjED,IAAAA,WAAW,CAACE,IAAZ,CAAiBhB,YAAY,CAAC;AAC5BiB,MAAAA,KAAK,EAAE,MADqB;AAE5BC,MAAAA,SAAS,EAAE,IAFiB;AAG5BC,MAAAA,gBAAgB,EAAGC,KAAD,IAAW;AAC3B,cAAMC,QAAQ,GAAG,EAAjB;;AAEA,aAAK,MAAMC,CAAX,IAAgBC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,CAAhB,EAAoC;AAClC,cAAItB,SAAS,CAAC2B,QAAV,CAAmBC,UAAnB,CAA8BN,KAAK,CAACE,CAAD,CAAnC,CAAJ,EAA6C;AAC3CD,YAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcF,KAAK,CAACE,CAAD,CAAL,CAASK,IAAT,EAAd;AACD,WAFD,MAEO;AACLN,YAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcF,KAAK,CAACE,CAAD,CAAnB;AACD;AACF;;AAED,eAAOD,QAAP;AACD;AAf2B,KAAD,CAA7B;AAiBD;;AAED,SAAOP,WAAP;AACD;;AAED,SAASc,iBAAT,CAA4BC,GAA5B,EAAiC;AAC/B,QAAMT,KAAK,GAAG,EAAd;AACAG,EAAAA,MAAM,CAACC,IAAP,CAAYK,GAAZ,EAAiBC,OAAjB,CAA0BpB,GAAD,IAAS;AAChCU,IAAAA,KAAK,CAACV,GAAD,CAAL,GAAaZ,SAAS,CAACiC,MAAV,CAAiBF,GAAG,CAACnB,GAAD,CAApB,CAAb;AACD,GAFD;AAGA,SAAOU,KAAP;AACD;;AAED,MAAMN,WAAW,GAAGD,iBAAiB,EAArC;AACA,MAAMmB,YAAY,GAAG,EAArB;AACA,MAAMZ,KAAK,GAAGQ,iBAAiB,CAACI,YAAD,CAA/B;AAEA,OAAO,SAAUC,YAAV,CAAuBD,YAAvB,EAAqCE,OAArC,EAA8C;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAeD,OAArB;AAEA,SAAOhC,WAAW,CAChBU,gBADgB,EAEhBQ,KAFgB,EAGhBjB,eAAe,CAAC,GAAGW,WAAJ,CAHC,CAAlB;AAKC;AAID,OAAO,MAAMsB,KAAK,GAAGlC,WAAW,CACdU,gBADc,EAEdQ,KAFc,EAGdnB,mBAAmB,CAACE,eAAe,CAAC,GAAGW,WAAJ,CAAhB,CAHL,CAAzB;AAKP,OAAO,MAAMuB,SAAS,GAAGjC,YAAY,CAACgC,KAAD,CAA9B","sourcesContent":["import Immutable from 'immutable'\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { createStore, applyMiddleware } from 'redux'\n\nimport { persistStore,persistReducer  } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' \n\nimport config from 'config'\nimport rootReducer from '../reducers'\n\nexport const persistConfig = { \n  key: 'primary',\n  storage,\n  whitelist: ['user'],\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nfunction createMiddlewares () {\n  const middlewares = [\n    thunkMiddleware\n  ]\n\n  if (config.env === 'development' && typeof window !== 'undefined') {\n    middlewares.push(createLogger({\n      level: 'info',\n      collapsed: true,\n      stateTransformer: (state) => {\n        const newState = {}\n\n        for (const i of Object.keys(state)) {\n          if (Immutable.Iterable.isIterable(state[i])) {\n            newState[i] = state[i].toJS()\n          } else {\n            newState[i] = state[i]\n          }\n        }\n\n        return newState\n      }\n    }))\n  }\n\n  return middlewares\n}\n\nfunction immutableChildren (obj) {\n  const state = {}\n  Object.keys(obj).forEach((key) => {\n    state[key] = Immutable.fromJS(obj[key])\n  })\n  return state\n}\n\nconst middlewares = createMiddlewares()\nconst initialState = {}\nconst state = immutableChildren(initialState)\n\nexport function  createStoreX(initialState, context) {\n  const { isServer } = context\n  \n  return createStore(\n    persistedReducer,\n    state,\n    applyMiddleware(...middlewares),\n    )\n  }\n  \n\n  \n  export const store = createStore(\n                    persistedReducer,\n                    state,\n                    composeWithDevTools(applyMiddleware(...middlewares)),\n                  )\n  export const persistor = persistStore(store)\n"]},"metadata":{},"sourceType":"module"}