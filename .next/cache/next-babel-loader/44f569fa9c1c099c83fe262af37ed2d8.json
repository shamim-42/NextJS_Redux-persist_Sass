{"ast":null,"code":"import Immutable from 'immutable';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport config from '../config';\nimport rootReducer from '../reducers';\nexport const persistConfig = {\n  key: 'primary',\n  storage,\n  whitelist: ['user']\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nfunction createMiddlewares() {\n  const middlewares = [thunkMiddleware];\n\n  if (config.env === 'development' && false) {\n    middlewares.push(createLogger({\n      level: 'info',\n      collapsed: true,\n      stateTransformer: state => {\n        const newState = {};\n\n        for (const i of Object.keys(state)) {\n          if (Immutable.Iterable.isIterable(state[i])) {\n            newState[i] = state[i].toJS();\n          } else {\n            newState[i] = state[i];\n          }\n        }\n\n        return newState;\n      }\n    }));\n  }\n\n  return middlewares;\n}\n\nfunction immutableChildren(obj) {\n  const state = {};\n  Object.keys(obj).forEach(key => {\n    state[key] = Immutable.fromJS(obj[key]);\n  });\n  return state;\n}\n\nconst middlewares = createMiddlewares();\nconst initialState = {};\nconst state = immutableChildren(initialState);\nexport function createStoreX(initialState, context) {\n  const {\n    isServer\n  } = context;\n  return createStore(persistedReducer, state, applyMiddleware(...middlewares));\n}\nexport const store = createStore(persistedReducer, state, composeWithDevTools(applyMiddleware(...middlewares)));\nexport const persistor = persistStore(store);","map":null,"metadata":{},"sourceType":"module"}